"""Autogenerated by Copilot."""

import pytest
from unittest.mock import patch, mock_open, MagicMock
from amexpdf.main import extract_transactions, parse_transactions, main
from click.testing import CliRunner


@patch("builtins.open", new_callable=mock_open, read_data="fake pdf content")
@patch("amexpdf.main.PdfReader")
def test_extract_transactions(mock_pdf_reader, mock_file):
    mock_pdf_reader.return_value.pages = [MagicMock(), MagicMock()]
    mock_pdf_reader.return_value.pages[
        1
    ].extract_text.return_value = "01.01.21 01.01.21 Transaction 1\n-1.000,00\n"

    transactions = extract_transactions("fake_path.pdf")

    assert len(transactions) == 1
    assert transactions[0] == ("01.01.21", "Transaction 1", "1000.00")


def test_parse_transactions():
    text = "01.01.21 01.01.21 Transaction 1\n-1.000,00\n"
    transactions = parse_transactions(text)

    assert len(transactions) == 1
    assert transactions[0] == ("01.01.21", "Transaction 1", "1000.00")


@patch("amexpdf.main.extract_transactions")
@patch("builtins.open", new_callable=mock_open)
def test_main(mock_file, mock_extract_transactions):
    mock_extract_transactions.return_value = [
        ("01.01.21", "Transaction 1", "1000.00")
    ]

    runner = CliRunner()
    result = runner.invoke(main, ["fake_path.pdf", "output.csv"])

    assert result.exit_code == 0
    mock_file.assert_called_once_with("output.csv", "w", newline="")
    mock_extract_transactions.assert_called_once_with("fake_path.pdf")


@patch("builtins.open", new_callable=mock_open, read_data="fake pdf content")
@patch("amexpdf.main.PdfReader")
def test_extract_transactions_multiple(mock_pdf_reader, mock_file):
    mock_pdf_reader.return_value.pages = [MagicMock(), MagicMock()]
    mock_pdf_reader.return_value.pages[1].extract_text.return_value = (
        "01.01.21 01.01.21 Transaction 1\n-1.000,00\n"
        "02.01.21 02.01.21 Transaction 2\n-2.000,00\n"
    )

    transactions = extract_transactions("fake_path.pdf")

    assert len(transactions) == 2
    assert transactions[0] == ("01.01.21", "Transaction 1", "1000.00")
    assert transactions[1] == ("02.01.21", "Transaction 2", "2000.00")


def test_parse_transactions_multiple():
    text = (
        "01.01.21 01.01.21 Transaction 1\n-1.000,00\n"
        "02.01.21 02.01.21 Transaction 2\n-2.000,00\n"
    )
    transactions = parse_transactions(text)

    assert len(transactions) == 2
    assert transactions[0] == ("01.01.21", "Transaction 1", "1000.00")
    assert transactions[1] == ("02.01.21", "Transaction 2", "2000.00")


@patch("amexpdf.main.extract_transactions")
@patch("builtins.open", new_callable=mock_open)
def test_main_no_transactions(mock_file, mock_extract_transactions):
    mock_extract_transactions.return_value = []

    runner = CliRunner()
    result = runner.invoke(main, ["fake_path.pdf", "output.csv"])

    assert result.exit_code == 0
    mock_file.assert_called_once_with("output.csv", "w", newline="")
    mock_extract_transactions.assert_called_once_with("fake_path.pdf")


def test_parse_transactions_ignore_interest_rate():
    text = (
        "01.01.21 01.01.21 Transaction 1\n-1.000,00\n"
        "Interest rate 1,5%\n"
        "02.01.21 02.01.21 Transaction 2\n-2.000,00\n"
    )
    transactions = parse_transactions(text)

    assert len(transactions) == 2
    assert transactions[0] == ("01.01.21", "Transaction 1", "1000.00")
    assert transactions[1] == ("02.01.21", "Transaction 2", "2000.00")


def test_parse_transactions_positive_and_negative_amounts():
    text = (
        "01.01.21 01.01.21 Transaction 1\n-1.000,00\n"
        "02.01.21 02.01.21 Transaction 2\n2.000,00\n"
    )
    transactions = parse_transactions(text)

    assert len(transactions) == 2
    assert transactions[0] == ("01.01.21", "Transaction 1", "1000.00")
    assert transactions[1] == ("02.01.21", "Transaction 2", "-2000.00")


def test_parse_transactions_remove_largest():
    text = (
        "01.01.21 01.01.21 Transaction 1\n1.000,00\n"
        "Not a real transaction\n2.000,00\n"
        "Not a real transaction\n5.000,00\n"
        "Not a real transaction\n1.000,00\n"
        "Not a real transaction\n2.000,00\n"
    )
    transactions = parse_transactions(text)

    assert len(transactions) == 1
    assert transactions[0] == ("01.01.21", "Transaction 1", "-1000.00")


if __name__ == "__main__":
    pytest.main()
